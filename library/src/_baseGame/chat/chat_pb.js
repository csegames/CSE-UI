/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.chat.ChatClientUnionMessage', null, global);
goog.exportSymbol('proto.chat.ChatClientUnionMessage.MessageTypes', null, global);
goog.exportSymbol('proto.chat.ChatMessage', null, global);
goog.exportSymbol('proto.chat.ChatMessage.MessageTypes', null, global);
goog.exportSymbol('proto.chat.ChatMessage.SenderFlag', null, global);
goog.exportSymbol('proto.chat.ChatServerUnionMessage', null, global);
goog.exportSymbol('proto.chat.ChatServerUnionMessage.MessageTypes', null, global);
goog.exportSymbol('proto.chat.PingPongMessage', null, global);
goog.exportSymbol('proto.chat.ProxyAuth', null, global);
goog.exportSymbol('proto.chat.ProxyAuth.UserTypes', null, global);
goog.exportSymbol('proto.chat.ProxyMessage', null, global);
goog.exportSymbol('proto.chat.ProxyMessage.MessageTypes', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.ActionType', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.AssignRole', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.BanUser', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.CreateRole', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.CreateRoom', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.DeleteRole', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.DeleteRoom', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.InviteUser', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.JoinRoom', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.KickUser', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.LeaveRoom', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.MuteUser', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.RenameRoom', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.TransferOwnership', null, global);
goog.exportSymbol('proto.chat.RoomActionRequest.UpdateRole', null, global);
goog.exportSymbol('proto.chat.RoomActionResponse', null, global);
goog.exportSymbol('proto.chat.RoomActionResponse.ActionResponseType', null, global);
goog.exportSymbol('proto.chat.RoomBanReceived', null, global);
goog.exportSymbol('proto.chat.RoomDirectory', null, global);
goog.exportSymbol('proto.chat.RoomInfo', null, global);
goog.exportSymbol('proto.chat.RoomInfo.RoomCategory', null, global);
goog.exportSymbol('proto.chat.RoomInfo.RoomRole', null, global);
goog.exportSymbol('proto.chat.RoomInviteReceived', null, global);
goog.exportSymbol('proto.chat.RoomJoined', null, global);
goog.exportSymbol('proto.chat.RoomKickReceived', null, global);
goog.exportSymbol('proto.chat.RoomLeft', null, global);
goog.exportSymbol('proto.chat.RoomMuteReceived', null, global);
goog.exportSymbol('proto.chat.RoomOwnerChanged', null, global);
goog.exportSymbol('proto.chat.RoomRenamed', null, global);
goog.exportSymbol('proto.chat.RoomRoleAdded', null, global);
goog.exportSymbol('proto.chat.RoomRoleAssigned', null, global);
goog.exportSymbol('proto.chat.RoomRoleRemoved', null, global);
goog.exportSymbol('proto.chat.RoomRoleUpdated', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.displayName = 'proto.chat.RoomActionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.CreateRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.CreateRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.CreateRoom.displayName = 'proto.chat.RoomActionRequest.CreateRoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.DeleteRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.DeleteRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.DeleteRoom.displayName = 'proto.chat.RoomActionRequest.DeleteRoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.RenameRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.RenameRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.RenameRoom.displayName = 'proto.chat.RoomActionRequest.RenameRoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.JoinRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.JoinRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.JoinRoom.displayName = 'proto.chat.RoomActionRequest.JoinRoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.LeaveRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.LeaveRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.LeaveRoom.displayName = 'proto.chat.RoomActionRequest.LeaveRoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.CreateRole = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.CreateRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.CreateRole.displayName = 'proto.chat.RoomActionRequest.CreateRole';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.UpdateRole = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.UpdateRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.UpdateRole.displayName = 'proto.chat.RoomActionRequest.UpdateRole';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.DeleteRole = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.DeleteRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.DeleteRole.displayName = 'proto.chat.RoomActionRequest.DeleteRole';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.AssignRole = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.AssignRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.AssignRole.displayName = 'proto.chat.RoomActionRequest.AssignRole';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.InviteUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.InviteUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.InviteUser.displayName = 'proto.chat.RoomActionRequest.InviteUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.KickUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.KickUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.KickUser.displayName = 'proto.chat.RoomActionRequest.KickUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.BanUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.BanUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.BanUser.displayName = 'proto.chat.RoomActionRequest.BanUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.MuteUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.MuteUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.MuteUser.displayName = 'proto.chat.RoomActionRequest.MuteUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionRequest.TransferOwnership = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionRequest.TransferOwnership, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionRequest.TransferOwnership.displayName = 'proto.chat.RoomActionRequest.TransferOwnership';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomActionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomActionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomActionResponse.displayName = 'proto.chat.RoomActionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chat.RoomInfo.repeatedFields_, null);
};
goog.inherits(proto.chat.RoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomInfo.displayName = 'proto.chat.RoomInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomInfo.RoomRole = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomInfo.RoomRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomInfo.RoomRole.displayName = 'proto.chat.RoomInfo.RoomRole';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomDirectory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chat.RoomDirectory.repeatedFields_, null);
};
goog.inherits(proto.chat.RoomDirectory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomDirectory.displayName = 'proto.chat.RoomDirectory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomJoined = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomJoined, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomJoined.displayName = 'proto.chat.RoomJoined';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomLeft = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomLeft, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomLeft.displayName = 'proto.chat.RoomLeft';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomRenamed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomRenamed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomRenamed.displayName = 'proto.chat.RoomRenamed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomRoleAdded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomRoleAdded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomRoleAdded.displayName = 'proto.chat.RoomRoleAdded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomRoleUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomRoleUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomRoleUpdated.displayName = 'proto.chat.RoomRoleUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomRoleRemoved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomRoleRemoved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomRoleRemoved.displayName = 'proto.chat.RoomRoleRemoved';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomRoleAssigned = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomRoleAssigned, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomRoleAssigned.displayName = 'proto.chat.RoomRoleAssigned';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomInviteReceived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomInviteReceived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomInviteReceived.displayName = 'proto.chat.RoomInviteReceived';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomKickReceived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomKickReceived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomKickReceived.displayName = 'proto.chat.RoomKickReceived';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomMuteReceived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomMuteReceived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomMuteReceived.displayName = 'proto.chat.RoomMuteReceived';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomBanReceived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomBanReceived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomBanReceived.displayName = 'proto.chat.RoomBanReceived';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.RoomOwnerChanged = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.RoomOwnerChanged, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.RoomOwnerChanged.displayName = 'proto.chat.RoomOwnerChanged';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.ChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ChatMessage.displayName = 'proto.chat.ChatMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.PingPongMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.PingPongMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.PingPongMessage.displayName = 'proto.chat.PingPongMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ChatServerUnionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.ChatServerUnionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ChatServerUnionMessage.displayName = 'proto.chat.ChatServerUnionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ChatClientUnionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.ChatClientUnionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ChatClientUnionMessage.displayName = 'proto.chat.ChatClientUnionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ProxyAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.ProxyAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ProxyAuth.displayName = 'proto.chat.ProxyAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ProxyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.ProxyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ProxyMessage.displayName = 'proto.chat.ProxyMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    create: (f = msg.getCreate()) && proto.chat.RoomActionRequest.CreateRoom.toObject(includeInstance, f),
    pb_delete: (f = msg.getDelete()) && proto.chat.RoomActionRequest.DeleteRoom.toObject(includeInstance, f),
    rename: (f = msg.getRename()) && proto.chat.RoomActionRequest.RenameRoom.toObject(includeInstance, f),
    join: (f = msg.getJoin()) && proto.chat.RoomActionRequest.JoinRoom.toObject(includeInstance, f),
    leave: (f = msg.getLeave()) && proto.chat.RoomActionRequest.LeaveRoom.toObject(includeInstance, f),
    createrole: (f = msg.getCreaterole()) && proto.chat.RoomActionRequest.CreateRole.toObject(includeInstance, f),
    updaterole: (f = msg.getUpdaterole()) && proto.chat.RoomActionRequest.UpdateRole.toObject(includeInstance, f),
    deleterole: (f = msg.getDeleterole()) && proto.chat.RoomActionRequest.DeleteRole.toObject(includeInstance, f),
    assignrole: (f = msg.getAssignrole()) && proto.chat.RoomActionRequest.AssignRole.toObject(includeInstance, f),
    inviteuser: (f = msg.getInviteuser()) && proto.chat.RoomActionRequest.InviteUser.toObject(includeInstance, f),
    kickuser: (f = msg.getKickuser()) && proto.chat.RoomActionRequest.KickUser.toObject(includeInstance, f),
    banuser: (f = msg.getBanuser()) && proto.chat.RoomActionRequest.BanUser.toObject(includeInstance, f),
    muteuser: (f = msg.getMuteuser()) && proto.chat.RoomActionRequest.MuteUser.toObject(includeInstance, f),
    transferowner: (f = msg.getTransferowner()) && proto.chat.RoomActionRequest.TransferOwnership.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest}
 */
proto.chat.RoomActionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest;
  return proto.chat.RoomActionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest}
 */
proto.chat.RoomActionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.chat.RoomActionRequest.ActionType} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 51:
      var value = new proto.chat.RoomActionRequest.CreateRoom;
      reader.readMessage(value,proto.chat.RoomActionRequest.CreateRoom.deserializeBinaryFromReader);
      msg.setCreate(value);
      break;
    case 52:
      var value = new proto.chat.RoomActionRequest.DeleteRoom;
      reader.readMessage(value,proto.chat.RoomActionRequest.DeleteRoom.deserializeBinaryFromReader);
      msg.setDelete(value);
      break;
    case 53:
      var value = new proto.chat.RoomActionRequest.RenameRoom;
      reader.readMessage(value,proto.chat.RoomActionRequest.RenameRoom.deserializeBinaryFromReader);
      msg.setRename(value);
      break;
    case 54:
      var value = new proto.chat.RoomActionRequest.JoinRoom;
      reader.readMessage(value,proto.chat.RoomActionRequest.JoinRoom.deserializeBinaryFromReader);
      msg.setJoin(value);
      break;
    case 55:
      var value = new proto.chat.RoomActionRequest.LeaveRoom;
      reader.readMessage(value,proto.chat.RoomActionRequest.LeaveRoom.deserializeBinaryFromReader);
      msg.setLeave(value);
      break;
    case 56:
      var value = new proto.chat.RoomActionRequest.CreateRole;
      reader.readMessage(value,proto.chat.RoomActionRequest.CreateRole.deserializeBinaryFromReader);
      msg.setCreaterole(value);
      break;
    case 57:
      var value = new proto.chat.RoomActionRequest.UpdateRole;
      reader.readMessage(value,proto.chat.RoomActionRequest.UpdateRole.deserializeBinaryFromReader);
      msg.setUpdaterole(value);
      break;
    case 58:
      var value = new proto.chat.RoomActionRequest.DeleteRole;
      reader.readMessage(value,proto.chat.RoomActionRequest.DeleteRole.deserializeBinaryFromReader);
      msg.setDeleterole(value);
      break;
    case 59:
      var value = new proto.chat.RoomActionRequest.AssignRole;
      reader.readMessage(value,proto.chat.RoomActionRequest.AssignRole.deserializeBinaryFromReader);
      msg.setAssignrole(value);
      break;
    case 60:
      var value = new proto.chat.RoomActionRequest.InviteUser;
      reader.readMessage(value,proto.chat.RoomActionRequest.InviteUser.deserializeBinaryFromReader);
      msg.setInviteuser(value);
      break;
    case 61:
      var value = new proto.chat.RoomActionRequest.KickUser;
      reader.readMessage(value,proto.chat.RoomActionRequest.KickUser.deserializeBinaryFromReader);
      msg.setKickuser(value);
      break;
    case 62:
      var value = new proto.chat.RoomActionRequest.BanUser;
      reader.readMessage(value,proto.chat.RoomActionRequest.BanUser.deserializeBinaryFromReader);
      msg.setBanuser(value);
      break;
    case 63:
      var value = new proto.chat.RoomActionRequest.MuteUser;
      reader.readMessage(value,proto.chat.RoomActionRequest.MuteUser.deserializeBinaryFromReader);
      msg.setMuteuser(value);
      break;
    case 64:
      var value = new proto.chat.RoomActionRequest.TransferOwnership;
      reader.readMessage(value,proto.chat.RoomActionRequest.TransferOwnership.deserializeBinaryFromReader);
      msg.setTransferowner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCreate();
  if (f != null) {
    writer.writeMessage(
      51,
      f,
      proto.chat.RoomActionRequest.CreateRoom.serializeBinaryToWriter
    );
  }
  f = message.getDelete();
  if (f != null) {
    writer.writeMessage(
      52,
      f,
      proto.chat.RoomActionRequest.DeleteRoom.serializeBinaryToWriter
    );
  }
  f = message.getRename();
  if (f != null) {
    writer.writeMessage(
      53,
      f,
      proto.chat.RoomActionRequest.RenameRoom.serializeBinaryToWriter
    );
  }
  f = message.getJoin();
  if (f != null) {
    writer.writeMessage(
      54,
      f,
      proto.chat.RoomActionRequest.JoinRoom.serializeBinaryToWriter
    );
  }
  f = message.getLeave();
  if (f != null) {
    writer.writeMessage(
      55,
      f,
      proto.chat.RoomActionRequest.LeaveRoom.serializeBinaryToWriter
    );
  }
  f = message.getCreaterole();
  if (f != null) {
    writer.writeMessage(
      56,
      f,
      proto.chat.RoomActionRequest.CreateRole.serializeBinaryToWriter
    );
  }
  f = message.getUpdaterole();
  if (f != null) {
    writer.writeMessage(
      57,
      f,
      proto.chat.RoomActionRequest.UpdateRole.serializeBinaryToWriter
    );
  }
  f = message.getDeleterole();
  if (f != null) {
    writer.writeMessage(
      58,
      f,
      proto.chat.RoomActionRequest.DeleteRole.serializeBinaryToWriter
    );
  }
  f = message.getAssignrole();
  if (f != null) {
    writer.writeMessage(
      59,
      f,
      proto.chat.RoomActionRequest.AssignRole.serializeBinaryToWriter
    );
  }
  f = message.getInviteuser();
  if (f != null) {
    writer.writeMessage(
      60,
      f,
      proto.chat.RoomActionRequest.InviteUser.serializeBinaryToWriter
    );
  }
  f = message.getKickuser();
  if (f != null) {
    writer.writeMessage(
      61,
      f,
      proto.chat.RoomActionRequest.KickUser.serializeBinaryToWriter
    );
  }
  f = message.getBanuser();
  if (f != null) {
    writer.writeMessage(
      62,
      f,
      proto.chat.RoomActionRequest.BanUser.serializeBinaryToWriter
    );
  }
  f = message.getMuteuser();
  if (f != null) {
    writer.writeMessage(
      63,
      f,
      proto.chat.RoomActionRequest.MuteUser.serializeBinaryToWriter
    );
  }
  f = message.getTransferowner();
  if (f != null) {
    writer.writeMessage(
      64,
      f,
      proto.chat.RoomActionRequest.TransferOwnership.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.chat.RoomActionRequest.ActionType = {
  CREATE: 0,
  DELETE: 1,
  RENAME: 2,
  JOIN: 3,
  LEAVE: 4,
  CREATEROLE: 5,
  UPDATEROLE: 6,
  DELETEROLE: 7,
  ASSIGNROLE: 8,
  INVITEUSER: 9,
  KICKUSER: 10,
  BANUSER: 11,
  MUTEUSER: 12,
  TRANSFEROWNERSHIP: 13,
  DIRECTORY: 14
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.CreateRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.CreateRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.CreateRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.CreateRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ispublic: jspb.Message.getFieldWithDefault(msg, 2, false),
    forgroupid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.CreateRoom}
 */
proto.chat.RoomActionRequest.CreateRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.CreateRoom;
  return proto.chat.RoomActionRequest.CreateRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.CreateRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.CreateRoom}
 */
proto.chat.RoomActionRequest.CreateRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspublic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setForgroupid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.CreateRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.CreateRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.CreateRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.CreateRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIspublic();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getForgroupid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.CreateRoom.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.CreateRoom.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool isPublic = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.CreateRoom.prototype.getIspublic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.chat.RoomActionRequest.CreateRoom.prototype.setIspublic = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string forGroupID = 3;
 * @return {string}
 */
proto.chat.RoomActionRequest.CreateRoom.prototype.getForgroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.CreateRoom.prototype.setForgroupid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.DeleteRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.DeleteRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.DeleteRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.DeleteRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.DeleteRoom}
 */
proto.chat.RoomActionRequest.DeleteRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.DeleteRoom;
  return proto.chat.RoomActionRequest.DeleteRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.DeleteRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.DeleteRoom}
 */
proto.chat.RoomActionRequest.DeleteRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.DeleteRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.DeleteRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.DeleteRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.DeleteRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.DeleteRoom.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.DeleteRoom.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.RenameRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.RenameRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.RenameRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.RenameRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.RenameRoom}
 */
proto.chat.RoomActionRequest.RenameRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.RenameRoom;
  return proto.chat.RoomActionRequest.RenameRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.RenameRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.RenameRoom}
 */
proto.chat.RoomActionRequest.RenameRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.RenameRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.RenameRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.RenameRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.RenameRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.RenameRoom.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.RenameRoom.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chat.RoomActionRequest.RenameRoom.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.RenameRoom.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.JoinRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.JoinRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.JoinRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.JoinRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    invitetoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.JoinRoom}
 */
proto.chat.RoomActionRequest.JoinRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.JoinRoom;
  return proto.chat.RoomActionRequest.JoinRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.JoinRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.JoinRoom}
 */
proto.chat.RoomActionRequest.JoinRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvitetoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.JoinRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.JoinRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.JoinRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.JoinRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInvitetoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.JoinRoom.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.JoinRoom.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string inviteToken = 2;
 * @return {string}
 */
proto.chat.RoomActionRequest.JoinRoom.prototype.getInvitetoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.JoinRoom.prototype.setInvitetoken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.LeaveRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.LeaveRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.LeaveRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.LeaveRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.LeaveRoom}
 */
proto.chat.RoomActionRequest.LeaveRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.LeaveRoom;
  return proto.chat.RoomActionRequest.LeaveRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.LeaveRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.LeaveRoom}
 */
proto.chat.RoomActionRequest.LeaveRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.LeaveRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.LeaveRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.LeaveRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.LeaveRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.LeaveRoom.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.LeaveRoom.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.CreateRole.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.CreateRole.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.CreateRole} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.CreateRole.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    permissions: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.CreateRole}
 */
proto.chat.RoomActionRequest.CreateRole.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.CreateRole;
  return proto.chat.RoomActionRequest.CreateRole.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.CreateRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.CreateRole}
 */
proto.chat.RoomActionRequest.CreateRole.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.CreateRole.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.CreateRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.CreateRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.CreateRole.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPermissions();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.CreateRole.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.CreateRole.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chat.RoomActionRequest.CreateRole.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.CreateRole.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 permissions = 3;
 * @return {number}
 */
proto.chat.RoomActionRequest.CreateRole.prototype.getPermissions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.chat.RoomActionRequest.CreateRole.prototype.setPermissions = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.UpdateRole.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.UpdateRole.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.UpdateRole} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.UpdateRole.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    permissions: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rename: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.UpdateRole}
 */
proto.chat.RoomActionRequest.UpdateRole.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.UpdateRole;
  return proto.chat.RoomActionRequest.UpdateRole.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.UpdateRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.UpdateRole}
 */
proto.chat.RoomActionRequest.UpdateRole.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPermissions(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.UpdateRole.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.UpdateRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.UpdateRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.UpdateRole.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPermissions();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.UpdateRole.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.UpdateRole.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chat.RoomActionRequest.UpdateRole.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.UpdateRole.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 permissions = 3;
 * @return {number}
 */
proto.chat.RoomActionRequest.UpdateRole.prototype.getPermissions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.chat.RoomActionRequest.UpdateRole.prototype.setPermissions = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string rename = 4;
 * @return {string}
 */
proto.chat.RoomActionRequest.UpdateRole.prototype.getRename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.UpdateRole.prototype.setRename = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.DeleteRole.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.DeleteRole.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.DeleteRole} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.DeleteRole.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.DeleteRole}
 */
proto.chat.RoomActionRequest.DeleteRole.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.DeleteRole;
  return proto.chat.RoomActionRequest.DeleteRole.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.DeleteRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.DeleteRole}
 */
proto.chat.RoomActionRequest.DeleteRole.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.DeleteRole.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.DeleteRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.DeleteRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.DeleteRole.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.DeleteRole.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.DeleteRole.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chat.RoomActionRequest.DeleteRole.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.DeleteRole.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.AssignRole.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.AssignRole.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.AssignRole} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.AssignRole.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    role: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.AssignRole}
 */
proto.chat.RoomActionRequest.AssignRole.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.AssignRole;
  return proto.chat.RoomActionRequest.AssignRole.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.AssignRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.AssignRole}
 */
proto.chat.RoomActionRequest.AssignRole.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.AssignRole.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.AssignRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.AssignRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.AssignRole.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.AssignRole.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.AssignRole.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string role = 2;
 * @return {string}
 */
proto.chat.RoomActionRequest.AssignRole.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.AssignRole.prototype.setRole = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string userID = 3;
 * @return {string}
 */
proto.chat.RoomActionRequest.AssignRole.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.AssignRole.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.InviteUser.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.InviteUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.InviteUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.InviteUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    charactername: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.InviteUser}
 */
proto.chat.RoomActionRequest.InviteUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.InviteUser;
  return proto.chat.RoomActionRequest.InviteUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.InviteUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.InviteUser}
 */
proto.chat.RoomActionRequest.InviteUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharactername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.InviteUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.InviteUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.InviteUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.InviteUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCharactername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.InviteUser.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.InviteUser.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.chat.RoomActionRequest.InviteUser.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.InviteUser.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string characterName = 3;
 * @return {string}
 */
proto.chat.RoomActionRequest.InviteUser.prototype.getCharactername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.InviteUser.prototype.setCharactername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.KickUser.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.KickUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.KickUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.KickUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.KickUser}
 */
proto.chat.RoomActionRequest.KickUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.KickUser;
  return proto.chat.RoomActionRequest.KickUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.KickUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.KickUser}
 */
proto.chat.RoomActionRequest.KickUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.KickUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.KickUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.KickUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.KickUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.KickUser.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.KickUser.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.chat.RoomActionRequest.KickUser.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.KickUser.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.BanUser.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.BanUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.BanUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.BanUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seconds: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.BanUser}
 */
proto.chat.RoomActionRequest.BanUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.BanUser;
  return proto.chat.RoomActionRequest.BanUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.BanUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.BanUser}
 */
proto.chat.RoomActionRequest.BanUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.BanUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.BanUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.BanUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.BanUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeconds();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.BanUser.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.BanUser.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.chat.RoomActionRequest.BanUser.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.BanUser.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 seconds = 3;
 * @return {number}
 */
proto.chat.RoomActionRequest.BanUser.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.chat.RoomActionRequest.BanUser.prototype.setSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.MuteUser.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.MuteUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.MuteUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.MuteUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seconds: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.MuteUser}
 */
proto.chat.RoomActionRequest.MuteUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.MuteUser;
  return proto.chat.RoomActionRequest.MuteUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.MuteUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.MuteUser}
 */
proto.chat.RoomActionRequest.MuteUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.MuteUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.MuteUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.MuteUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.MuteUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeconds();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.MuteUser.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.MuteUser.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.chat.RoomActionRequest.MuteUser.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.MuteUser.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 seconds = 3;
 * @return {number}
 */
proto.chat.RoomActionRequest.MuteUser.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.chat.RoomActionRequest.MuteUser.prototype.setSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionRequest.TransferOwnership.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionRequest.TransferOwnership.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionRequest.TransferOwnership} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.TransferOwnership.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newownerid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionRequest.TransferOwnership}
 */
proto.chat.RoomActionRequest.TransferOwnership.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionRequest.TransferOwnership;
  return proto.chat.RoomActionRequest.TransferOwnership.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionRequest.TransferOwnership} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionRequest.TransferOwnership}
 */
proto.chat.RoomActionRequest.TransferOwnership.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewownerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionRequest.TransferOwnership.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionRequest.TransferOwnership.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionRequest.TransferOwnership} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionRequest.TransferOwnership.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewownerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomActionRequest.TransferOwnership.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.TransferOwnership.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string newOwnerID = 2;
 * @return {string}
 */
proto.chat.RoomActionRequest.TransferOwnership.prototype.getNewownerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomActionRequest.TransferOwnership.prototype.setNewownerid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ActionType action = 1;
 * @return {!proto.chat.RoomActionRequest.ActionType}
 */
proto.chat.RoomActionRequest.prototype.getAction = function() {
  return /** @type {!proto.chat.RoomActionRequest.ActionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.chat.RoomActionRequest.ActionType} value */
proto.chat.RoomActionRequest.prototype.setAction = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CreateRoom create = 51;
 * @return {?proto.chat.RoomActionRequest.CreateRoom}
 */
proto.chat.RoomActionRequest.prototype.getCreate = function() {
  return /** @type{?proto.chat.RoomActionRequest.CreateRoom} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.CreateRoom, 51));
};


/** @param {?proto.chat.RoomActionRequest.CreateRoom|undefined} value */
proto.chat.RoomActionRequest.prototype.setCreate = function(value) {
  jspb.Message.setWrapperField(this, 51, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearCreate = function() {
  this.setCreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasCreate = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * optional DeleteRoom delete = 52;
 * @return {?proto.chat.RoomActionRequest.DeleteRoom}
 */
proto.chat.RoomActionRequest.prototype.getDelete = function() {
  return /** @type{?proto.chat.RoomActionRequest.DeleteRoom} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.DeleteRoom, 52));
};


/** @param {?proto.chat.RoomActionRequest.DeleteRoom|undefined} value */
proto.chat.RoomActionRequest.prototype.setDelete = function(value) {
  jspb.Message.setWrapperField(this, 52, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearDelete = function() {
  this.setDelete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasDelete = function() {
  return jspb.Message.getField(this, 52) != null;
};


/**
 * optional RenameRoom rename = 53;
 * @return {?proto.chat.RoomActionRequest.RenameRoom}
 */
proto.chat.RoomActionRequest.prototype.getRename = function() {
  return /** @type{?proto.chat.RoomActionRequest.RenameRoom} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.RenameRoom, 53));
};


/** @param {?proto.chat.RoomActionRequest.RenameRoom|undefined} value */
proto.chat.RoomActionRequest.prototype.setRename = function(value) {
  jspb.Message.setWrapperField(this, 53, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearRename = function() {
  this.setRename(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasRename = function() {
  return jspb.Message.getField(this, 53) != null;
};


/**
 * optional JoinRoom join = 54;
 * @return {?proto.chat.RoomActionRequest.JoinRoom}
 */
proto.chat.RoomActionRequest.prototype.getJoin = function() {
  return /** @type{?proto.chat.RoomActionRequest.JoinRoom} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.JoinRoom, 54));
};


/** @param {?proto.chat.RoomActionRequest.JoinRoom|undefined} value */
proto.chat.RoomActionRequest.prototype.setJoin = function(value) {
  jspb.Message.setWrapperField(this, 54, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearJoin = function() {
  this.setJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasJoin = function() {
  return jspb.Message.getField(this, 54) != null;
};


/**
 * optional LeaveRoom leave = 55;
 * @return {?proto.chat.RoomActionRequest.LeaveRoom}
 */
proto.chat.RoomActionRequest.prototype.getLeave = function() {
  return /** @type{?proto.chat.RoomActionRequest.LeaveRoom} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.LeaveRoom, 55));
};


/** @param {?proto.chat.RoomActionRequest.LeaveRoom|undefined} value */
proto.chat.RoomActionRequest.prototype.setLeave = function(value) {
  jspb.Message.setWrapperField(this, 55, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearLeave = function() {
  this.setLeave(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasLeave = function() {
  return jspb.Message.getField(this, 55) != null;
};


/**
 * optional CreateRole createRole = 56;
 * @return {?proto.chat.RoomActionRequest.CreateRole}
 */
proto.chat.RoomActionRequest.prototype.getCreaterole = function() {
  return /** @type{?proto.chat.RoomActionRequest.CreateRole} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.CreateRole, 56));
};


/** @param {?proto.chat.RoomActionRequest.CreateRole|undefined} value */
proto.chat.RoomActionRequest.prototype.setCreaterole = function(value) {
  jspb.Message.setWrapperField(this, 56, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearCreaterole = function() {
  this.setCreaterole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasCreaterole = function() {
  return jspb.Message.getField(this, 56) != null;
};


/**
 * optional UpdateRole updateRole = 57;
 * @return {?proto.chat.RoomActionRequest.UpdateRole}
 */
proto.chat.RoomActionRequest.prototype.getUpdaterole = function() {
  return /** @type{?proto.chat.RoomActionRequest.UpdateRole} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.UpdateRole, 57));
};


/** @param {?proto.chat.RoomActionRequest.UpdateRole|undefined} value */
proto.chat.RoomActionRequest.prototype.setUpdaterole = function(value) {
  jspb.Message.setWrapperField(this, 57, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearUpdaterole = function() {
  this.setUpdaterole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasUpdaterole = function() {
  return jspb.Message.getField(this, 57) != null;
};


/**
 * optional DeleteRole deleteRole = 58;
 * @return {?proto.chat.RoomActionRequest.DeleteRole}
 */
proto.chat.RoomActionRequest.prototype.getDeleterole = function() {
  return /** @type{?proto.chat.RoomActionRequest.DeleteRole} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.DeleteRole, 58));
};


/** @param {?proto.chat.RoomActionRequest.DeleteRole|undefined} value */
proto.chat.RoomActionRequest.prototype.setDeleterole = function(value) {
  jspb.Message.setWrapperField(this, 58, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearDeleterole = function() {
  this.setDeleterole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasDeleterole = function() {
  return jspb.Message.getField(this, 58) != null;
};


/**
 * optional AssignRole assignRole = 59;
 * @return {?proto.chat.RoomActionRequest.AssignRole}
 */
proto.chat.RoomActionRequest.prototype.getAssignrole = function() {
  return /** @type{?proto.chat.RoomActionRequest.AssignRole} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.AssignRole, 59));
};


/** @param {?proto.chat.RoomActionRequest.AssignRole|undefined} value */
proto.chat.RoomActionRequest.prototype.setAssignrole = function(value) {
  jspb.Message.setWrapperField(this, 59, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearAssignrole = function() {
  this.setAssignrole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasAssignrole = function() {
  return jspb.Message.getField(this, 59) != null;
};


/**
 * optional InviteUser inviteUser = 60;
 * @return {?proto.chat.RoomActionRequest.InviteUser}
 */
proto.chat.RoomActionRequest.prototype.getInviteuser = function() {
  return /** @type{?proto.chat.RoomActionRequest.InviteUser} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.InviteUser, 60));
};


/** @param {?proto.chat.RoomActionRequest.InviteUser|undefined} value */
proto.chat.RoomActionRequest.prototype.setInviteuser = function(value) {
  jspb.Message.setWrapperField(this, 60, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearInviteuser = function() {
  this.setInviteuser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasInviteuser = function() {
  return jspb.Message.getField(this, 60) != null;
};


/**
 * optional KickUser kickUser = 61;
 * @return {?proto.chat.RoomActionRequest.KickUser}
 */
proto.chat.RoomActionRequest.prototype.getKickuser = function() {
  return /** @type{?proto.chat.RoomActionRequest.KickUser} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.KickUser, 61));
};


/** @param {?proto.chat.RoomActionRequest.KickUser|undefined} value */
proto.chat.RoomActionRequest.prototype.setKickuser = function(value) {
  jspb.Message.setWrapperField(this, 61, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearKickuser = function() {
  this.setKickuser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasKickuser = function() {
  return jspb.Message.getField(this, 61) != null;
};


/**
 * optional BanUser banUser = 62;
 * @return {?proto.chat.RoomActionRequest.BanUser}
 */
proto.chat.RoomActionRequest.prototype.getBanuser = function() {
  return /** @type{?proto.chat.RoomActionRequest.BanUser} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.BanUser, 62));
};


/** @param {?proto.chat.RoomActionRequest.BanUser|undefined} value */
proto.chat.RoomActionRequest.prototype.setBanuser = function(value) {
  jspb.Message.setWrapperField(this, 62, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearBanuser = function() {
  this.setBanuser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasBanuser = function() {
  return jspb.Message.getField(this, 62) != null;
};


/**
 * optional MuteUser muteUser = 63;
 * @return {?proto.chat.RoomActionRequest.MuteUser}
 */
proto.chat.RoomActionRequest.prototype.getMuteuser = function() {
  return /** @type{?proto.chat.RoomActionRequest.MuteUser} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.MuteUser, 63));
};


/** @param {?proto.chat.RoomActionRequest.MuteUser|undefined} value */
proto.chat.RoomActionRequest.prototype.setMuteuser = function(value) {
  jspb.Message.setWrapperField(this, 63, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearMuteuser = function() {
  this.setMuteuser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasMuteuser = function() {
  return jspb.Message.getField(this, 63) != null;
};


/**
 * optional TransferOwnership transferOwner = 64;
 * @return {?proto.chat.RoomActionRequest.TransferOwnership}
 */
proto.chat.RoomActionRequest.prototype.getTransferowner = function() {
  return /** @type{?proto.chat.RoomActionRequest.TransferOwnership} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest.TransferOwnership, 64));
};


/** @param {?proto.chat.RoomActionRequest.TransferOwnership|undefined} value */
proto.chat.RoomActionRequest.prototype.setTransferowner = function(value) {
  jspb.Message.setWrapperField(this, 64, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomActionRequest.prototype.clearTransferowner = function() {
  this.setTransferowner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomActionRequest.prototype.hasTransferowner = function() {
  return jspb.Message.getField(this, 64) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomActionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomActionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomActionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: jspb.Message.getFieldWithDefault(msg, 2, false),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomActionResponse}
 */
proto.chat.RoomActionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomActionResponse;
  return proto.chat.RoomActionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomActionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomActionResponse}
 */
proto.chat.RoomActionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.chat.RoomActionResponse.ActionResponseType} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomActionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomActionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomActionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomActionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.chat.RoomActionResponse.ActionResponseType = {
  CREATE: 0,
  DELETE: 1,
  RENAME: 2,
  JOIN: 3,
  LEAVE: 4,
  CREATEROLE: 5,
  UPDATEROLE: 6,
  DELETEROLE: 7,
  ASSIGNROLE: 8,
  INVITE: 9,
  KICKUSER: 10,
  BANUSER: 11,
  MUTEUSER: 12,
  TRANSFEROWNERSHIP: 13
};

/**
 * optional ActionResponseType action = 1;
 * @return {!proto.chat.RoomActionResponse.ActionResponseType}
 */
proto.chat.RoomActionResponse.prototype.getAction = function() {
  return /** @type {!proto.chat.RoomActionResponse.ActionResponseType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.chat.RoomActionResponse.ActionResponseType} value */
proto.chat.RoomActionResponse.prototype.setAction = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool success = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.chat.RoomActionResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.chat.RoomActionResponse.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.chat.RoomActionResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chat.RoomActionResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chat.RoomInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    category: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.chat.RoomInfo.RoomRole.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomInfo}
 */
proto.chat.RoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomInfo;
  return proto.chat.RoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomInfo}
 */
proto.chat.RoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.chat.RoomInfo.RoomCategory} */ (reader.readEnum());
      msg.setCategory(value);
      break;
    case 4:
      var value = new proto.chat.RoomInfo.RoomRole;
      reader.readMessage(value,proto.chat.RoomInfo.RoomRole.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.chat.RoomInfo.RoomRole.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.chat.RoomInfo.RoomCategory = {
  GENERAL: 0,
  WARBAND: 1,
  ORDER: 2,
  CAMPAIGN: 3,
  CUSTOM: 4
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomInfo.RoomRole.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomInfo.RoomRole.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomInfo.RoomRole} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomInfo.RoomRole.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    permissions: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomInfo.RoomRole}
 */
proto.chat.RoomInfo.RoomRole.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomInfo.RoomRole;
  return proto.chat.RoomInfo.RoomRole.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomInfo.RoomRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomInfo.RoomRole}
 */
proto.chat.RoomInfo.RoomRole.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomInfo.RoomRole.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomInfo.RoomRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomInfo.RoomRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomInfo.RoomRole.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPermissions();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chat.RoomInfo.RoomRole.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomInfo.RoomRole.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 permissions = 3;
 * @return {number}
 */
proto.chat.RoomInfo.RoomRole.prototype.getPermissions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.chat.RoomInfo.RoomRole.prototype.setPermissions = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomInfo.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomInfo.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chat.RoomInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional RoomCategory category = 3;
 * @return {!proto.chat.RoomInfo.RoomCategory}
 */
proto.chat.RoomInfo.prototype.getCategory = function() {
  return /** @type {!proto.chat.RoomInfo.RoomCategory} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.chat.RoomInfo.RoomCategory} value */
proto.chat.RoomInfo.prototype.setCategory = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated RoomRole roles = 4;
 * @return {!Array<!proto.chat.RoomInfo.RoomRole>}
 */
proto.chat.RoomInfo.prototype.getRolesList = function() {
  return /** @type{!Array<!proto.chat.RoomInfo.RoomRole>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.chat.RoomInfo.RoomRole, 4));
};


/** @param {!Array<!proto.chat.RoomInfo.RoomRole>} value */
proto.chat.RoomInfo.prototype.setRolesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.chat.RoomInfo.RoomRole=} opt_value
 * @param {number=} opt_index
 * @return {!proto.chat.RoomInfo.RoomRole}
 */
proto.chat.RoomInfo.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.chat.RoomInfo.RoomRole, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.chat.RoomInfo.prototype.clearRolesList = function() {
  this.setRolesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chat.RoomDirectory.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomDirectory.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomDirectory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomDirectory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomDirectory.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomsList: jspb.Message.toObjectList(msg.getRoomsList(),
    proto.chat.RoomInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomDirectory}
 */
proto.chat.RoomDirectory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomDirectory;
  return proto.chat.RoomDirectory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomDirectory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomDirectory}
 */
proto.chat.RoomDirectory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chat.RoomInfo;
      reader.readMessage(value,proto.chat.RoomInfo.deserializeBinaryFromReader);
      msg.addRooms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomDirectory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomDirectory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomDirectory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomDirectory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.chat.RoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RoomInfo rooms = 1;
 * @return {!Array<!proto.chat.RoomInfo>}
 */
proto.chat.RoomDirectory.prototype.getRoomsList = function() {
  return /** @type{!Array<!proto.chat.RoomInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.chat.RoomInfo, 1));
};


/** @param {!Array<!proto.chat.RoomInfo>} value */
proto.chat.RoomDirectory.prototype.setRoomsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.chat.RoomInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.chat.RoomInfo}
 */
proto.chat.RoomDirectory.prototype.addRooms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.chat.RoomInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.chat.RoomDirectory.prototype.clearRoomsList = function() {
  this.setRoomsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomJoined.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomJoined.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomJoined} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomJoined.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    role: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomJoined}
 */
proto.chat.RoomJoined.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomJoined;
  return proto.chat.RoomJoined.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomJoined} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomJoined}
 */
proto.chat.RoomJoined.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomJoined.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomJoined.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomJoined} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomJoined.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomJoined.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomJoined.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.chat.RoomJoined.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomJoined.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.chat.RoomJoined.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chat.RoomJoined.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string role = 4;
 * @return {string}
 */
proto.chat.RoomJoined.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.chat.RoomJoined.prototype.setRole = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomLeft.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomLeft.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomLeft} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomLeft.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomLeft}
 */
proto.chat.RoomLeft.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomLeft;
  return proto.chat.RoomLeft.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomLeft} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomLeft}
 */
proto.chat.RoomLeft.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomLeft.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomLeft.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomLeft} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomLeft.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomLeft.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomLeft.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.chat.RoomLeft.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomLeft.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.chat.RoomLeft.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chat.RoomLeft.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomRenamed.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomRenamed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomRenamed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomRenamed.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomRenamed}
 */
proto.chat.RoomRenamed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomRenamed;
  return proto.chat.RoomRenamed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomRenamed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomRenamed}
 */
proto.chat.RoomRenamed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomRenamed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomRenamed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomRenamed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomRenamed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomRenamed.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomRenamed.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chat.RoomRenamed.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomRenamed.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomRoleAdded.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomRoleAdded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomRoleAdded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomRoleAdded.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    permissions: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomRoleAdded}
 */
proto.chat.RoomRoleAdded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomRoleAdded;
  return proto.chat.RoomRoleAdded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomRoleAdded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomRoleAdded}
 */
proto.chat.RoomRoleAdded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomRoleAdded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomRoleAdded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomRoleAdded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomRoleAdded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPermissions();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomRoleAdded.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomRoleAdded.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chat.RoomRoleAdded.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomRoleAdded.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 permissions = 3;
 * @return {number}
 */
proto.chat.RoomRoleAdded.prototype.getPermissions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.chat.RoomRoleAdded.prototype.setPermissions = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomRoleUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomRoleUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomRoleUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomRoleUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    permissions: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomRoleUpdated}
 */
proto.chat.RoomRoleUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomRoleUpdated;
  return proto.chat.RoomRoleUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomRoleUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomRoleUpdated}
 */
proto.chat.RoomRoleUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomRoleUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomRoleUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomRoleUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomRoleUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPermissions();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomRoleUpdated.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomRoleUpdated.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chat.RoomRoleUpdated.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomRoleUpdated.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 permissions = 3;
 * @return {number}
 */
proto.chat.RoomRoleUpdated.prototype.getPermissions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.chat.RoomRoleUpdated.prototype.setPermissions = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomRoleRemoved.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomRoleRemoved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomRoleRemoved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomRoleRemoved.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomRoleRemoved}
 */
proto.chat.RoomRoleRemoved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomRoleRemoved;
  return proto.chat.RoomRoleRemoved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomRoleRemoved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomRoleRemoved}
 */
proto.chat.RoomRoleRemoved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomRoleRemoved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomRoleRemoved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomRoleRemoved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomRoleRemoved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomRoleRemoved.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomRoleRemoved.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.chat.RoomRoleRemoved.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomRoleRemoved.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomRoleAssigned.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomRoleAssigned.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomRoleAssigned} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomRoleAssigned.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rolename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomRoleAssigned}
 */
proto.chat.RoomRoleAssigned.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomRoleAssigned;
  return proto.chat.RoomRoleAssigned.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomRoleAssigned} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomRoleAssigned}
 */
proto.chat.RoomRoleAssigned.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRolename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomRoleAssigned.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomRoleAssigned.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomRoleAssigned} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomRoleAssigned.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRolename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomRoleAssigned.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomRoleAssigned.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string roleName = 2;
 * @return {string}
 */
proto.chat.RoomRoleAssigned.prototype.getRolename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomRoleAssigned.prototype.setRolename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string userID = 3;
 * @return {string}
 */
proto.chat.RoomRoleAssigned.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chat.RoomRoleAssigned.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomInviteReceived.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomInviteReceived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomInviteReceived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomInviteReceived.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomInviteReceived}
 */
proto.chat.RoomInviteReceived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomInviteReceived;
  return proto.chat.RoomInviteReceived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomInviteReceived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomInviteReceived}
 */
proto.chat.RoomInviteReceived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomInviteReceived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomInviteReceived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomInviteReceived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomInviteReceived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomInviteReceived.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomInviteReceived.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string roomName = 2;
 * @return {string}
 */
proto.chat.RoomInviteReceived.prototype.getRoomname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomInviteReceived.prototype.setRoomname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomKickReceived.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomKickReceived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomKickReceived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomKickReceived.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomKickReceived}
 */
proto.chat.RoomKickReceived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomKickReceived;
  return proto.chat.RoomKickReceived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomKickReceived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomKickReceived}
 */
proto.chat.RoomKickReceived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomKickReceived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomKickReceived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomKickReceived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomKickReceived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomKickReceived.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomKickReceived.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomMuteReceived.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomMuteReceived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomMuteReceived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomMuteReceived.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expiration: (f = msg.getExpiration()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomMuteReceived}
 */
proto.chat.RoomMuteReceived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomMuteReceived;
  return proto.chat.RoomMuteReceived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomMuteReceived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomMuteReceived}
 */
proto.chat.RoomMuteReceived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomMuteReceived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomMuteReceived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomMuteReceived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomMuteReceived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomMuteReceived.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomMuteReceived.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp expiration = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.chat.RoomMuteReceived.prototype.getExpiration = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.chat.RoomMuteReceived.prototype.setExpiration = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomMuteReceived.prototype.clearExpiration = function() {
  this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomMuteReceived.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomBanReceived.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomBanReceived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomBanReceived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomBanReceived.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expiration: (f = msg.getExpiration()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomBanReceived}
 */
proto.chat.RoomBanReceived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomBanReceived;
  return proto.chat.RoomBanReceived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomBanReceived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomBanReceived}
 */
proto.chat.RoomBanReceived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomBanReceived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomBanReceived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomBanReceived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomBanReceived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomBanReceived.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomBanReceived.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp expiration = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.chat.RoomBanReceived.prototype.getExpiration = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.chat.RoomBanReceived.prototype.setExpiration = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.RoomBanReceived.prototype.clearExpiration = function() {
  this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.RoomBanReceived.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.RoomOwnerChanged.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.RoomOwnerChanged.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.RoomOwnerChanged} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomOwnerChanged.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.RoomOwnerChanged}
 */
proto.chat.RoomOwnerChanged.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.RoomOwnerChanged;
  return proto.chat.RoomOwnerChanged.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.RoomOwnerChanged} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.RoomOwnerChanged}
 */
proto.chat.RoomOwnerChanged.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.RoomOwnerChanged.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.RoomOwnerChanged.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.RoomOwnerChanged} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.RoomOwnerChanged.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.chat.RoomOwnerChanged.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chat.RoomOwnerChanged.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.chat.RoomOwnerChanged.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.RoomOwnerChanged.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: jspb.Message.getFieldWithDefault(msg, 2, ""),
    senderflag: jspb.Message.getFieldWithDefault(msg, 3, 0),
    senderid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sendername: jspb.Message.getFieldWithDefault(msg, 5, ""),
    targetid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    targetname: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ChatMessage}
 */
proto.chat.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ChatMessage;
  return proto.chat.ChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ChatMessage}
 */
proto.chat.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.chat.ChatMessage.MessageTypes} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {!proto.chat.ChatMessage.SenderFlag} */ (reader.readEnum());
      msg.setSenderflag(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendername(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSenderflag();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSenderid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSendername();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTargetid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTargetname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.chat.ChatMessage.MessageTypes = {
  ERROR: 0,
  DIRECT: 1,
  ROOM: 2,
  ANNOUNCEMENT: 3
};

/**
 * @enum {number}
 */
proto.chat.ChatMessage.SenderFlag = {
  PLAYER: 0,
  CSE: 1
};

/**
 * optional MessageTypes type = 1;
 * @return {!proto.chat.ChatMessage.MessageTypes}
 */
proto.chat.ChatMessage.prototype.getType = function() {
  return /** @type {!proto.chat.ChatMessage.MessageTypes} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.chat.ChatMessage.MessageTypes} value */
proto.chat.ChatMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.chat.ChatMessage.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.ChatMessage.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SenderFlag senderFlag = 3;
 * @return {!proto.chat.ChatMessage.SenderFlag}
 */
proto.chat.ChatMessage.prototype.getSenderflag = function() {
  return /** @type {!proto.chat.ChatMessage.SenderFlag} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.chat.ChatMessage.SenderFlag} value */
proto.chat.ChatMessage.prototype.setSenderflag = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string senderID = 4;
 * @return {string}
 */
proto.chat.ChatMessage.prototype.getSenderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.chat.ChatMessage.prototype.setSenderid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string senderName = 5;
 * @return {string}
 */
proto.chat.ChatMessage.prototype.getSendername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.chat.ChatMessage.prototype.setSendername = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string targetID = 6;
 * @return {string}
 */
proto.chat.ChatMessage.prototype.getTargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.chat.ChatMessage.prototype.setTargetid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string targetName = 7;
 * @return {string}
 */
proto.chat.ChatMessage.prototype.getTargetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.chat.ChatMessage.prototype.setTargetname = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.PingPongMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.PingPongMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.PingPongMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.PingPongMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    ping: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.PingPongMessage}
 */
proto.chat.PingPongMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.PingPongMessage;
  return proto.chat.PingPongMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.PingPongMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.PingPongMessage}
 */
proto.chat.PingPongMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.PingPongMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.PingPongMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.PingPongMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.PingPongMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPing();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool ping = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.chat.PingPongMessage.prototype.getPing = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.chat.PingPongMessage.prototype.setPing = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ChatServerUnionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ChatServerUnionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ChatServerUnionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ChatServerUnionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chat: (f = msg.getChat()) && proto.chat.ChatMessage.toObject(includeInstance, f),
    pingpong: (f = msg.getPingpong()) && proto.chat.PingPongMessage.toObject(includeInstance, f),
    roomaction: (f = msg.getRoomaction()) && proto.chat.RoomActionRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ChatServerUnionMessage}
 */
proto.chat.ChatServerUnionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ChatServerUnionMessage;
  return proto.chat.ChatServerUnionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ChatServerUnionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ChatServerUnionMessage}
 */
proto.chat.ChatServerUnionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.chat.ChatServerUnionMessage.MessageTypes} */ (reader.readEnum());
      msg.setMessagetype(value);
      break;
    case 2:
      var value = new proto.chat.ChatMessage;
      reader.readMessage(value,proto.chat.ChatMessage.deserializeBinaryFromReader);
      msg.setChat(value);
      break;
    case 3:
      var value = new proto.chat.PingPongMessage;
      reader.readMessage(value,proto.chat.PingPongMessage.deserializeBinaryFromReader);
      msg.setPingpong(value);
      break;
    case 5:
      var value = new proto.chat.RoomActionRequest;
      reader.readMessage(value,proto.chat.RoomActionRequest.deserializeBinaryFromReader);
      msg.setRoomaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ChatServerUnionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ChatServerUnionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ChatServerUnionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ChatServerUnionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chat.ChatMessage.serializeBinaryToWriter
    );
  }
  f = message.getPingpong();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.chat.PingPongMessage.serializeBinaryToWriter
    );
  }
  f = message.getRoomaction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.chat.RoomActionRequest.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.chat.ChatServerUnionMessage.MessageTypes = {
  NONE: 0,
  CHAT: 1,
  PINGPONG: 2,
  ROOMACTION: 3
};

/**
 * optional MessageTypes messageType = 1;
 * @return {!proto.chat.ChatServerUnionMessage.MessageTypes}
 */
proto.chat.ChatServerUnionMessage.prototype.getMessagetype = function() {
  return /** @type {!proto.chat.ChatServerUnionMessage.MessageTypes} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.chat.ChatServerUnionMessage.MessageTypes} value */
proto.chat.ChatServerUnionMessage.prototype.setMessagetype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ChatMessage chat = 2;
 * @return {?proto.chat.ChatMessage}
 */
proto.chat.ChatServerUnionMessage.prototype.getChat = function() {
  return /** @type{?proto.chat.ChatMessage} */ (
    jspb.Message.getWrapperField(this, proto.chat.ChatMessage, 2));
};


/** @param {?proto.chat.ChatMessage|undefined} value */
proto.chat.ChatServerUnionMessage.prototype.setChat = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatServerUnionMessage.prototype.clearChat = function() {
  this.setChat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatServerUnionMessage.prototype.hasChat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PingPongMessage pingPong = 3;
 * @return {?proto.chat.PingPongMessage}
 */
proto.chat.ChatServerUnionMessage.prototype.getPingpong = function() {
  return /** @type{?proto.chat.PingPongMessage} */ (
    jspb.Message.getWrapperField(this, proto.chat.PingPongMessage, 3));
};


/** @param {?proto.chat.PingPongMessage|undefined} value */
proto.chat.ChatServerUnionMessage.prototype.setPingpong = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatServerUnionMessage.prototype.clearPingpong = function() {
  this.setPingpong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatServerUnionMessage.prototype.hasPingpong = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RoomActionRequest roomAction = 5;
 * @return {?proto.chat.RoomActionRequest}
 */
proto.chat.ChatServerUnionMessage.prototype.getRoomaction = function() {
  return /** @type{?proto.chat.RoomActionRequest} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionRequest, 5));
};


/** @param {?proto.chat.RoomActionRequest|undefined} value */
proto.chat.ChatServerUnionMessage.prototype.setRoomaction = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatServerUnionMessage.prototype.clearRoomaction = function() {
  this.setRoomaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatServerUnionMessage.prototype.hasRoomaction = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ChatClientUnionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ChatClientUnionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ChatClientUnionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ChatClientUnionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chat: (f = msg.getChat()) && proto.chat.ChatMessage.toObject(includeInstance, f),
    pingpong: (f = msg.getPingpong()) && proto.chat.PingPongMessage.toObject(includeInstance, f),
    roomaction: (f = msg.getRoomaction()) && proto.chat.RoomActionResponse.toObject(includeInstance, f),
    info: (f = msg.getInfo()) && proto.chat.RoomInfo.toObject(includeInstance, f),
    joined: (f = msg.getJoined()) && proto.chat.RoomJoined.toObject(includeInstance, f),
    left: (f = msg.getLeft()) && proto.chat.RoomLeft.toObject(includeInstance, f),
    renamed: (f = msg.getRenamed()) && proto.chat.RoomRenamed.toObject(includeInstance, f),
    roleadded: (f = msg.getRoleadded()) && proto.chat.RoomRoleAdded.toObject(includeInstance, f),
    roleupdated: (f = msg.getRoleupdated()) && proto.chat.RoomRoleUpdated.toObject(includeInstance, f),
    roleremoved: (f = msg.getRoleremoved()) && proto.chat.RoomRoleRemoved.toObject(includeInstance, f),
    roleassigned: (f = msg.getRoleassigned()) && proto.chat.RoomRoleAssigned.toObject(includeInstance, f),
    invited: (f = msg.getInvited()) && proto.chat.RoomInviteReceived.toObject(includeInstance, f),
    kicked: (f = msg.getKicked()) && proto.chat.RoomKickReceived.toObject(includeInstance, f),
    muted: (f = msg.getMuted()) && proto.chat.RoomMuteReceived.toObject(includeInstance, f),
    banned: (f = msg.getBanned()) && proto.chat.RoomBanReceived.toObject(includeInstance, f),
    ownerchanged: (f = msg.getOwnerchanged()) && proto.chat.RoomOwnerChanged.toObject(includeInstance, f),
    directory: (f = msg.getDirectory()) && proto.chat.RoomDirectory.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ChatClientUnionMessage}
 */
proto.chat.ChatClientUnionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ChatClientUnionMessage;
  return proto.chat.ChatClientUnionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ChatClientUnionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ChatClientUnionMessage}
 */
proto.chat.ChatClientUnionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.chat.ChatClientUnionMessage.MessageTypes} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.chat.ChatMessage;
      reader.readMessage(value,proto.chat.ChatMessage.deserializeBinaryFromReader);
      msg.setChat(value);
      break;
    case 3:
      var value = new proto.chat.PingPongMessage;
      reader.readMessage(value,proto.chat.PingPongMessage.deserializeBinaryFromReader);
      msg.setPingpong(value);
      break;
    case 5:
      var value = new proto.chat.RoomActionResponse;
      reader.readMessage(value,proto.chat.RoomActionResponse.deserializeBinaryFromReader);
      msg.setRoomaction(value);
      break;
    case 6:
      var value = new proto.chat.RoomInfo;
      reader.readMessage(value,proto.chat.RoomInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 7:
      var value = new proto.chat.RoomJoined;
      reader.readMessage(value,proto.chat.RoomJoined.deserializeBinaryFromReader);
      msg.setJoined(value);
      break;
    case 8:
      var value = new proto.chat.RoomLeft;
      reader.readMessage(value,proto.chat.RoomLeft.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 9:
      var value = new proto.chat.RoomRenamed;
      reader.readMessage(value,proto.chat.RoomRenamed.deserializeBinaryFromReader);
      msg.setRenamed(value);
      break;
    case 10:
      var value = new proto.chat.RoomRoleAdded;
      reader.readMessage(value,proto.chat.RoomRoleAdded.deserializeBinaryFromReader);
      msg.setRoleadded(value);
      break;
    case 11:
      var value = new proto.chat.RoomRoleUpdated;
      reader.readMessage(value,proto.chat.RoomRoleUpdated.deserializeBinaryFromReader);
      msg.setRoleupdated(value);
      break;
    case 12:
      var value = new proto.chat.RoomRoleRemoved;
      reader.readMessage(value,proto.chat.RoomRoleRemoved.deserializeBinaryFromReader);
      msg.setRoleremoved(value);
      break;
    case 13:
      var value = new proto.chat.RoomRoleAssigned;
      reader.readMessage(value,proto.chat.RoomRoleAssigned.deserializeBinaryFromReader);
      msg.setRoleassigned(value);
      break;
    case 14:
      var value = new proto.chat.RoomInviteReceived;
      reader.readMessage(value,proto.chat.RoomInviteReceived.deserializeBinaryFromReader);
      msg.setInvited(value);
      break;
    case 15:
      var value = new proto.chat.RoomKickReceived;
      reader.readMessage(value,proto.chat.RoomKickReceived.deserializeBinaryFromReader);
      msg.setKicked(value);
      break;
    case 16:
      var value = new proto.chat.RoomMuteReceived;
      reader.readMessage(value,proto.chat.RoomMuteReceived.deserializeBinaryFromReader);
      msg.setMuted(value);
      break;
    case 17:
      var value = new proto.chat.RoomBanReceived;
      reader.readMessage(value,proto.chat.RoomBanReceived.deserializeBinaryFromReader);
      msg.setBanned(value);
      break;
    case 18:
      var value = new proto.chat.RoomOwnerChanged;
      reader.readMessage(value,proto.chat.RoomOwnerChanged.deserializeBinaryFromReader);
      msg.setOwnerchanged(value);
      break;
    case 19:
      var value = new proto.chat.RoomDirectory;
      reader.readMessage(value,proto.chat.RoomDirectory.deserializeBinaryFromReader);
      msg.setDirectory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ChatClientUnionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ChatClientUnionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ChatClientUnionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ChatClientUnionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chat.ChatMessage.serializeBinaryToWriter
    );
  }
  f = message.getPingpong();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.chat.PingPongMessage.serializeBinaryToWriter
    );
  }
  f = message.getRoomaction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.chat.RoomActionResponse.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.chat.RoomInfo.serializeBinaryToWriter
    );
  }
  f = message.getJoined();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.chat.RoomJoined.serializeBinaryToWriter
    );
  }
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.chat.RoomLeft.serializeBinaryToWriter
    );
  }
  f = message.getRenamed();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.chat.RoomRenamed.serializeBinaryToWriter
    );
  }
  f = message.getRoleadded();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.chat.RoomRoleAdded.serializeBinaryToWriter
    );
  }
  f = message.getRoleupdated();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.chat.RoomRoleUpdated.serializeBinaryToWriter
    );
  }
  f = message.getRoleremoved();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.chat.RoomRoleRemoved.serializeBinaryToWriter
    );
  }
  f = message.getRoleassigned();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.chat.RoomRoleAssigned.serializeBinaryToWriter
    );
  }
  f = message.getInvited();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.chat.RoomInviteReceived.serializeBinaryToWriter
    );
  }
  f = message.getKicked();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.chat.RoomKickReceived.serializeBinaryToWriter
    );
  }
  f = message.getMuted();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.chat.RoomMuteReceived.serializeBinaryToWriter
    );
  }
  f = message.getBanned();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.chat.RoomBanReceived.serializeBinaryToWriter
    );
  }
  f = message.getOwnerchanged();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.chat.RoomOwnerChanged.serializeBinaryToWriter
    );
  }
  f = message.getDirectory();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.chat.RoomDirectory.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.chat.ChatClientUnionMessage.MessageTypes = {
  NONE: 0,
  CHATMESSAGE: 1,
  PINGPONGMESSAGE: 2,
  ROOMACTION: 4,
  ROOMINFO: 5,
  JOINED: 6,
  LEFT: 7,
  RENAMED: 8,
  ROLEADDED: 9,
  ROLEUPDATED: 10,
  ROLEREMOVED: 11,
  ROLEASSIGNED: 12,
  INVITERECEIVED: 13,
  KICKED: 14,
  BANNED: 15,
  MUTED: 16,
  OWNERCHANGED: 17,
  DIRECTORY: 18
};

/**
 * optional MessageTypes type = 1;
 * @return {!proto.chat.ChatClientUnionMessage.MessageTypes}
 */
proto.chat.ChatClientUnionMessage.prototype.getType = function() {
  return /** @type {!proto.chat.ChatClientUnionMessage.MessageTypes} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.chat.ChatClientUnionMessage.MessageTypes} value */
proto.chat.ChatClientUnionMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ChatMessage chat = 2;
 * @return {?proto.chat.ChatMessage}
 */
proto.chat.ChatClientUnionMessage.prototype.getChat = function() {
  return /** @type{?proto.chat.ChatMessage} */ (
    jspb.Message.getWrapperField(this, proto.chat.ChatMessage, 2));
};


/** @param {?proto.chat.ChatMessage|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setChat = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearChat = function() {
  this.setChat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasChat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PingPongMessage pingPong = 3;
 * @return {?proto.chat.PingPongMessage}
 */
proto.chat.ChatClientUnionMessage.prototype.getPingpong = function() {
  return /** @type{?proto.chat.PingPongMessage} */ (
    jspb.Message.getWrapperField(this, proto.chat.PingPongMessage, 3));
};


/** @param {?proto.chat.PingPongMessage|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setPingpong = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearPingpong = function() {
  this.setPingpong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasPingpong = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RoomActionResponse roomAction = 5;
 * @return {?proto.chat.RoomActionResponse}
 */
proto.chat.ChatClientUnionMessage.prototype.getRoomaction = function() {
  return /** @type{?proto.chat.RoomActionResponse} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomActionResponse, 5));
};


/** @param {?proto.chat.RoomActionResponse|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setRoomaction = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearRoomaction = function() {
  this.setRoomaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasRoomaction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RoomInfo info = 6;
 * @return {?proto.chat.RoomInfo}
 */
proto.chat.ChatClientUnionMessage.prototype.getInfo = function() {
  return /** @type{?proto.chat.RoomInfo} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomInfo, 6));
};


/** @param {?proto.chat.RoomInfo|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RoomJoined joined = 7;
 * @return {?proto.chat.RoomJoined}
 */
proto.chat.ChatClientUnionMessage.prototype.getJoined = function() {
  return /** @type{?proto.chat.RoomJoined} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomJoined, 7));
};


/** @param {?proto.chat.RoomJoined|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setJoined = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearJoined = function() {
  this.setJoined(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasJoined = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RoomLeft left = 8;
 * @return {?proto.chat.RoomLeft}
 */
proto.chat.ChatClientUnionMessage.prototype.getLeft = function() {
  return /** @type{?proto.chat.RoomLeft} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomLeft, 8));
};


/** @param {?proto.chat.RoomLeft|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setLeft = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearLeft = function() {
  this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RoomRenamed renamed = 9;
 * @return {?proto.chat.RoomRenamed}
 */
proto.chat.ChatClientUnionMessage.prototype.getRenamed = function() {
  return /** @type{?proto.chat.RoomRenamed} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomRenamed, 9));
};


/** @param {?proto.chat.RoomRenamed|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setRenamed = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearRenamed = function() {
  this.setRenamed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasRenamed = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RoomRoleAdded roleAdded = 10;
 * @return {?proto.chat.RoomRoleAdded}
 */
proto.chat.ChatClientUnionMessage.prototype.getRoleadded = function() {
  return /** @type{?proto.chat.RoomRoleAdded} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomRoleAdded, 10));
};


/** @param {?proto.chat.RoomRoleAdded|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setRoleadded = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearRoleadded = function() {
  this.setRoleadded(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasRoleadded = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RoomRoleUpdated roleUpdated = 11;
 * @return {?proto.chat.RoomRoleUpdated}
 */
proto.chat.ChatClientUnionMessage.prototype.getRoleupdated = function() {
  return /** @type{?proto.chat.RoomRoleUpdated} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomRoleUpdated, 11));
};


/** @param {?proto.chat.RoomRoleUpdated|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setRoleupdated = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearRoleupdated = function() {
  this.setRoleupdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasRoleupdated = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RoomRoleRemoved roleRemoved = 12;
 * @return {?proto.chat.RoomRoleRemoved}
 */
proto.chat.ChatClientUnionMessage.prototype.getRoleremoved = function() {
  return /** @type{?proto.chat.RoomRoleRemoved} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomRoleRemoved, 12));
};


/** @param {?proto.chat.RoomRoleRemoved|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setRoleremoved = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearRoleremoved = function() {
  this.setRoleremoved(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasRoleremoved = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RoomRoleAssigned roleAssigned = 13;
 * @return {?proto.chat.RoomRoleAssigned}
 */
proto.chat.ChatClientUnionMessage.prototype.getRoleassigned = function() {
  return /** @type{?proto.chat.RoomRoleAssigned} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomRoleAssigned, 13));
};


/** @param {?proto.chat.RoomRoleAssigned|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setRoleassigned = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearRoleassigned = function() {
  this.setRoleassigned(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasRoleassigned = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional RoomInviteReceived invited = 14;
 * @return {?proto.chat.RoomInviteReceived}
 */
proto.chat.ChatClientUnionMessage.prototype.getInvited = function() {
  return /** @type{?proto.chat.RoomInviteReceived} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomInviteReceived, 14));
};


/** @param {?proto.chat.RoomInviteReceived|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setInvited = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearInvited = function() {
  this.setInvited(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasInvited = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RoomKickReceived kicked = 15;
 * @return {?proto.chat.RoomKickReceived}
 */
proto.chat.ChatClientUnionMessage.prototype.getKicked = function() {
  return /** @type{?proto.chat.RoomKickReceived} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomKickReceived, 15));
};


/** @param {?proto.chat.RoomKickReceived|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setKicked = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearKicked = function() {
  this.setKicked(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasKicked = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional RoomMuteReceived muted = 16;
 * @return {?proto.chat.RoomMuteReceived}
 */
proto.chat.ChatClientUnionMessage.prototype.getMuted = function() {
  return /** @type{?proto.chat.RoomMuteReceived} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomMuteReceived, 16));
};


/** @param {?proto.chat.RoomMuteReceived|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setMuted = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearMuted = function() {
  this.setMuted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasMuted = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional RoomBanReceived banned = 17;
 * @return {?proto.chat.RoomBanReceived}
 */
proto.chat.ChatClientUnionMessage.prototype.getBanned = function() {
  return /** @type{?proto.chat.RoomBanReceived} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomBanReceived, 17));
};


/** @param {?proto.chat.RoomBanReceived|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setBanned = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearBanned = function() {
  this.setBanned(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasBanned = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional RoomOwnerChanged ownerChanged = 18;
 * @return {?proto.chat.RoomOwnerChanged}
 */
proto.chat.ChatClientUnionMessage.prototype.getOwnerchanged = function() {
  return /** @type{?proto.chat.RoomOwnerChanged} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomOwnerChanged, 18));
};


/** @param {?proto.chat.RoomOwnerChanged|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setOwnerchanged = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearOwnerchanged = function() {
  this.setOwnerchanged(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasOwnerchanged = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional RoomDirectory directory = 19;
 * @return {?proto.chat.RoomDirectory}
 */
proto.chat.ChatClientUnionMessage.prototype.getDirectory = function() {
  return /** @type{?proto.chat.RoomDirectory} */ (
    jspb.Message.getWrapperField(this, proto.chat.RoomDirectory, 19));
};


/** @param {?proto.chat.RoomDirectory|undefined} value */
proto.chat.ChatClientUnionMessage.prototype.setDirectory = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ChatClientUnionMessage.prototype.clearDirectory = function() {
  this.setDirectory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ChatClientUnionMessage.prototype.hasDirectory = function() {
  return jspb.Message.getField(this, 19) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ProxyAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ProxyAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ProxyAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ProxyAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourceipaddr: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ProxyAuth}
 */
proto.chat.ProxyAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ProxyAuth;
  return proto.chat.ProxyAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ProxyAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ProxyAuth}
 */
proto.chat.ProxyAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.chat.ProxyAuth.UserTypes} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSourceipaddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ProxyAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ProxyAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ProxyAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ProxyAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAccountid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourceipaddr();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.chat.ProxyAuth.UserTypes = {
  PLAYER: 0,
  BOT: 1
};

/**
 * optional UserTypes type = 1;
 * @return {!proto.chat.ProxyAuth.UserTypes}
 */
proto.chat.ProxyAuth.prototype.getType = function() {
  return /** @type {!proto.chat.ProxyAuth.UserTypes} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.chat.ProxyAuth.UserTypes} value */
proto.chat.ProxyAuth.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string accountID = 2;
 * @return {string}
 */
proto.chat.ProxyAuth.prototype.getAccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.ProxyAuth.prototype.setAccountid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 sourceIPAddr = 3;
 * @return {number}
 */
proto.chat.ProxyAuth.prototype.getSourceipaddr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.chat.ProxyAuth.prototype.setSourceipaddr = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ProxyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ProxyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ProxyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ProxyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    auth: (f = msg.getAuth()) && proto.chat.ProxyAuth.toObject(includeInstance, f),
    pingpong: (f = msg.getPingpong()) && proto.chat.PingPongMessage.toObject(includeInstance, f),
    servermessage: (f = msg.getServermessage()) && proto.chat.ChatServerUnionMessage.toObject(includeInstance, f),
    clientmessage: (f = msg.getClientmessage()) && proto.chat.ChatClientUnionMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ProxyMessage}
 */
proto.chat.ProxyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ProxyMessage;
  return proto.chat.ProxyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ProxyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ProxyMessage}
 */
proto.chat.ProxyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.chat.ProxyMessage.MessageTypes} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = new proto.chat.ProxyAuth;
      reader.readMessage(value,proto.chat.ProxyAuth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 4:
      var value = new proto.chat.PingPongMessage;
      reader.readMessage(value,proto.chat.PingPongMessage.deserializeBinaryFromReader);
      msg.setPingpong(value);
      break;
    case 5:
      var value = new proto.chat.ChatServerUnionMessage;
      reader.readMessage(value,proto.chat.ChatServerUnionMessage.deserializeBinaryFromReader);
      msg.setServermessage(value);
      break;
    case 6:
      var value = new proto.chat.ChatClientUnionMessage;
      reader.readMessage(value,proto.chat.ChatClientUnionMessage.deserializeBinaryFromReader);
      msg.setClientmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ProxyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ProxyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ProxyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ProxyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.chat.ProxyAuth.serializeBinaryToWriter
    );
  }
  f = message.getPingpong();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.chat.PingPongMessage.serializeBinaryToWriter
    );
  }
  f = message.getServermessage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.chat.ChatServerUnionMessage.serializeBinaryToWriter
    );
  }
  f = message.getClientmessage();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.chat.ChatClientUnionMessage.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.chat.ProxyMessage.MessageTypes = {
  NONE: 0,
  AUTH: 1,
  PINGPONG: 2,
  SERVER: 3,
  CLIENT: 4,
  REMOVEUSER: 5
};

/**
 * optional MessageTypes type = 1;
 * @return {!proto.chat.ProxyMessage.MessageTypes}
 */
proto.chat.ProxyMessage.prototype.getType = function() {
  return /** @type {!proto.chat.ProxyMessage.MessageTypes} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.chat.ProxyMessage.MessageTypes} value */
proto.chat.ProxyMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.chat.ProxyMessage.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chat.ProxyMessage.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ProxyAuth auth = 3;
 * @return {?proto.chat.ProxyAuth}
 */
proto.chat.ProxyMessage.prototype.getAuth = function() {
  return /** @type{?proto.chat.ProxyAuth} */ (
    jspb.Message.getWrapperField(this, proto.chat.ProxyAuth, 3));
};


/** @param {?proto.chat.ProxyAuth|undefined} value */
proto.chat.ProxyMessage.prototype.setAuth = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ProxyMessage.prototype.clearAuth = function() {
  this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ProxyMessage.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PingPongMessage pingPong = 4;
 * @return {?proto.chat.PingPongMessage}
 */
proto.chat.ProxyMessage.prototype.getPingpong = function() {
  return /** @type{?proto.chat.PingPongMessage} */ (
    jspb.Message.getWrapperField(this, proto.chat.PingPongMessage, 4));
};


/** @param {?proto.chat.PingPongMessage|undefined} value */
proto.chat.ProxyMessage.prototype.setPingpong = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ProxyMessage.prototype.clearPingpong = function() {
  this.setPingpong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ProxyMessage.prototype.hasPingpong = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ChatServerUnionMessage serverMessage = 5;
 * @return {?proto.chat.ChatServerUnionMessage}
 */
proto.chat.ProxyMessage.prototype.getServermessage = function() {
  return /** @type{?proto.chat.ChatServerUnionMessage} */ (
    jspb.Message.getWrapperField(this, proto.chat.ChatServerUnionMessage, 5));
};


/** @param {?proto.chat.ChatServerUnionMessage|undefined} value */
proto.chat.ProxyMessage.prototype.setServermessage = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ProxyMessage.prototype.clearServermessage = function() {
  this.setServermessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ProxyMessage.prototype.hasServermessage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ChatClientUnionMessage clientMessage = 6;
 * @return {?proto.chat.ChatClientUnionMessage}
 */
proto.chat.ProxyMessage.prototype.getClientmessage = function() {
  return /** @type{?proto.chat.ChatClientUnionMessage} */ (
    jspb.Message.getWrapperField(this, proto.chat.ChatClientUnionMessage, 6));
};


/** @param {?proto.chat.ChatClientUnionMessage|undefined} value */
proto.chat.ProxyMessage.prototype.setClientmessage = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chat.ProxyMessage.prototype.clearClientmessage = function() {
  this.setClientmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ProxyMessage.prototype.hasClientmessage = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.chat);
